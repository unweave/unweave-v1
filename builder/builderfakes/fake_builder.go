// Code generated by counterfeiter. DO NOT EDIT.
package builderfakes

import (
	"context"
	"io"
	"sync"

	"github.com/unweave/unweave-v1/api/types"
	"github.com/unweave/unweave-v1/builder"
)

type FakeBuilder struct {
	BuildAndPushStub        func(context.Context, string, string, string, io.Reader) error
	buildAndPushMutex       sync.RWMutex
	buildAndPushArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 io.Reader
	}
	buildAndPushReturns struct {
		result1 error
	}
	buildAndPushReturnsOnCall map[int]struct {
		result1 error
	}
	GetBuilderStub        func() string
	getBuilderMutex       sync.RWMutex
	getBuilderArgsForCall []struct {
	}
	getBuilderReturns struct {
		result1 string
	}
	getBuilderReturnsOnCall map[int]struct {
		result1 string
	}
	GetImageURIStub        func(context.Context, string, string, string) string
	getImageURIMutex       sync.RWMutex
	getImageURIArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	getImageURIReturns struct {
		result1 string
	}
	getImageURIReturnsOnCall map[int]struct {
		result1 string
	}
	LogsStub        func(context.Context, string) ([]types.LogEntry, error)
	logsMutex       sync.RWMutex
	logsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	logsReturns struct {
		result1 []types.LogEntry
		result2 error
	}
	logsReturnsOnCall map[int]struct {
		result1 []types.LogEntry
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBuilder) BuildAndPush(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 io.Reader) error {
	fake.buildAndPushMutex.Lock()
	ret, specificReturn := fake.buildAndPushReturnsOnCall[len(fake.buildAndPushArgsForCall)]
	fake.buildAndPushArgsForCall = append(fake.buildAndPushArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 io.Reader
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.BuildAndPushStub
	fakeReturns := fake.buildAndPushReturns
	fake.recordInvocation("BuildAndPush", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.buildAndPushMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBuilder) BuildAndPushCallCount() int {
	fake.buildAndPushMutex.RLock()
	defer fake.buildAndPushMutex.RUnlock()
	return len(fake.buildAndPushArgsForCall)
}

func (fake *FakeBuilder) BuildAndPushCalls(stub func(context.Context, string, string, string, io.Reader) error) {
	fake.buildAndPushMutex.Lock()
	defer fake.buildAndPushMutex.Unlock()
	fake.BuildAndPushStub = stub
}

func (fake *FakeBuilder) BuildAndPushArgsForCall(i int) (context.Context, string, string, string, io.Reader) {
	fake.buildAndPushMutex.RLock()
	defer fake.buildAndPushMutex.RUnlock()
	argsForCall := fake.buildAndPushArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeBuilder) BuildAndPushReturns(result1 error) {
	fake.buildAndPushMutex.Lock()
	defer fake.buildAndPushMutex.Unlock()
	fake.BuildAndPushStub = nil
	fake.buildAndPushReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuilder) BuildAndPushReturnsOnCall(i int, result1 error) {
	fake.buildAndPushMutex.Lock()
	defer fake.buildAndPushMutex.Unlock()
	fake.BuildAndPushStub = nil
	if fake.buildAndPushReturnsOnCall == nil {
		fake.buildAndPushReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.buildAndPushReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBuilder) GetBuilder() string {
	fake.getBuilderMutex.Lock()
	ret, specificReturn := fake.getBuilderReturnsOnCall[len(fake.getBuilderArgsForCall)]
	fake.getBuilderArgsForCall = append(fake.getBuilderArgsForCall, struct {
	}{})
	stub := fake.GetBuilderStub
	fakeReturns := fake.getBuilderReturns
	fake.recordInvocation("GetBuilder", []interface{}{})
	fake.getBuilderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBuilder) GetBuilderCallCount() int {
	fake.getBuilderMutex.RLock()
	defer fake.getBuilderMutex.RUnlock()
	return len(fake.getBuilderArgsForCall)
}

func (fake *FakeBuilder) GetBuilderCalls(stub func() string) {
	fake.getBuilderMutex.Lock()
	defer fake.getBuilderMutex.Unlock()
	fake.GetBuilderStub = stub
}

func (fake *FakeBuilder) GetBuilderReturns(result1 string) {
	fake.getBuilderMutex.Lock()
	defer fake.getBuilderMutex.Unlock()
	fake.GetBuilderStub = nil
	fake.getBuilderReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBuilder) GetBuilderReturnsOnCall(i int, result1 string) {
	fake.getBuilderMutex.Lock()
	defer fake.getBuilderMutex.Unlock()
	fake.GetBuilderStub = nil
	if fake.getBuilderReturnsOnCall == nil {
		fake.getBuilderReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getBuilderReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeBuilder) GetImageURI(arg1 context.Context, arg2 string, arg3 string, arg4 string) string {
	fake.getImageURIMutex.Lock()
	ret, specificReturn := fake.getImageURIReturnsOnCall[len(fake.getImageURIArgsForCall)]
	fake.getImageURIArgsForCall = append(fake.getImageURIArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetImageURIStub
	fakeReturns := fake.getImageURIReturns
	fake.recordInvocation("GetImageURI", []interface{}{arg1, arg2, arg3, arg4})
	fake.getImageURIMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBuilder) GetImageURICallCount() int {
	fake.getImageURIMutex.RLock()
	defer fake.getImageURIMutex.RUnlock()
	return len(fake.getImageURIArgsForCall)
}

func (fake *FakeBuilder) GetImageURICalls(stub func(context.Context, string, string, string) string) {
	fake.getImageURIMutex.Lock()
	defer fake.getImageURIMutex.Unlock()
	fake.GetImageURIStub = stub
}

func (fake *FakeBuilder) GetImageURIArgsForCall(i int) (context.Context, string, string, string) {
	fake.getImageURIMutex.RLock()
	defer fake.getImageURIMutex.RUnlock()
	argsForCall := fake.getImageURIArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeBuilder) GetImageURIReturns(result1 string) {
	fake.getImageURIMutex.Lock()
	defer fake.getImageURIMutex.Unlock()
	fake.GetImageURIStub = nil
	fake.getImageURIReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBuilder) GetImageURIReturnsOnCall(i int, result1 string) {
	fake.getImageURIMutex.Lock()
	defer fake.getImageURIMutex.Unlock()
	fake.GetImageURIStub = nil
	if fake.getImageURIReturnsOnCall == nil {
		fake.getImageURIReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getImageURIReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeBuilder) Logs(arg1 context.Context, arg2 string) ([]types.LogEntry, error) {
	fake.logsMutex.Lock()
	ret, specificReturn := fake.logsReturnsOnCall[len(fake.logsArgsForCall)]
	fake.logsArgsForCall = append(fake.logsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.LogsStub
	fakeReturns := fake.logsReturns
	fake.recordInvocation("Logs", []interface{}{arg1, arg2})
	fake.logsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBuilder) LogsCallCount() int {
	fake.logsMutex.RLock()
	defer fake.logsMutex.RUnlock()
	return len(fake.logsArgsForCall)
}

func (fake *FakeBuilder) LogsCalls(stub func(context.Context, string) ([]types.LogEntry, error)) {
	fake.logsMutex.Lock()
	defer fake.logsMutex.Unlock()
	fake.LogsStub = stub
}

func (fake *FakeBuilder) LogsArgsForCall(i int) (context.Context, string) {
	fake.logsMutex.RLock()
	defer fake.logsMutex.RUnlock()
	argsForCall := fake.logsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBuilder) LogsReturns(result1 []types.LogEntry, result2 error) {
	fake.logsMutex.Lock()
	defer fake.logsMutex.Unlock()
	fake.LogsStub = nil
	fake.logsReturns = struct {
		result1 []types.LogEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeBuilder) LogsReturnsOnCall(i int, result1 []types.LogEntry, result2 error) {
	fake.logsMutex.Lock()
	defer fake.logsMutex.Unlock()
	fake.LogsStub = nil
	if fake.logsReturnsOnCall == nil {
		fake.logsReturnsOnCall = make(map[int]struct {
			result1 []types.LogEntry
			result2 error
		})
	}
	fake.logsReturnsOnCall[i] = struct {
		result1 []types.LogEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildAndPushMutex.RLock()
	defer fake.buildAndPushMutex.RUnlock()
	fake.getBuilderMutex.RLock()
	defer fake.getBuilderMutex.RUnlock()
	fake.getImageURIMutex.RLock()
	defer fake.getImageURIMutex.RUnlock()
	fake.logsMutex.RLock()
	defer fake.logsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ builder.Builder = new(FakeBuilder)
