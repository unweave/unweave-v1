// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: api_views.sql

package db

import (
	"context"
	"encoding/json"
	"time"
)

const MxExecGet = `-- name: MxExecGet :one

select e.id,
       e.name,
       e.status,
       e.provider,
       e.region,
       e.created_at,
       e.metadata
from unweave.exec as e
where e.id = $1
`

type MxExecGetRow struct {
	ID        string            `json:"id"`
	Name      string            `json:"name"`
	Status    UnweaveExecStatus `json:"status"`
	Provider  string            `json:"provider"`
	Region    string            `json:"region"`
	CreatedAt time.Time         `json:"createdAt"`
	Metadata  json.RawMessage   `json:"metadata"`
}

// -----------------------------------------------------------------
// The queries below return data in the format expected by the API.
// -----------------------------------------------------------------
func (q *Queries) MxExecGet(ctx context.Context, id string) (MxExecGetRow, error) {
	row := q.db.QueryRowContext(ctx, MxExecGet, id)
	var i MxExecGetRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.Provider,
		&i.Region,
		&i.CreatedAt,
		&i.Metadata,
	)
	return i, err
}

const MxExecsGet = `-- name: MxExecsGet :many
select e.id,
       e.name,
       e.status,
       e.provider,
       e.region,
       e.created_at,
       e.metadata
from unweave.exec as e
where e.project_id = $1
`

type MxExecsGetRow struct {
	ID        string            `json:"id"`
	Name      string            `json:"name"`
	Status    UnweaveExecStatus `json:"status"`
	Provider  string            `json:"provider"`
	Region    string            `json:"region"`
	CreatedAt time.Time         `json:"createdAt"`
	Metadata  json.RawMessage   `json:"metadata"`
}

func (q *Queries) MxExecsGet(ctx context.Context, projectID string) ([]MxExecsGetRow, error) {
	rows, err := q.db.QueryContext(ctx, MxExecsGet, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MxExecsGetRow
	for rows.Next() {
		var i MxExecsGetRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.Provider,
			&i.Region,
			&i.CreatedAt,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
