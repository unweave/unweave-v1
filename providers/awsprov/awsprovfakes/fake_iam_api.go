// Code generated by counterfeiter. DO NOT EDIT.
package awsprovfakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/iam"
	"github.com/unweave/unweave/providers/awsprov"
)

type FakeIamAPI struct {
	AddRoleToInstanceProfileStub        func(context.Context, *iam.AddRoleToInstanceProfileInput, ...func(*iam.Options)) (*iam.AddRoleToInstanceProfileOutput, error)
	addRoleToInstanceProfileMutex       sync.RWMutex
	addRoleToInstanceProfileArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.AddRoleToInstanceProfileInput
		arg3 []func(*iam.Options)
	}
	addRoleToInstanceProfileReturns struct {
		result1 *iam.AddRoleToInstanceProfileOutput
		result2 error
	}
	addRoleToInstanceProfileReturnsOnCall map[int]struct {
		result1 *iam.AddRoleToInstanceProfileOutput
		result2 error
	}
	AttachRolePolicyStub        func(context.Context, *iam.AttachRolePolicyInput, ...func(*iam.Options)) (*iam.AttachRolePolicyOutput, error)
	attachRolePolicyMutex       sync.RWMutex
	attachRolePolicyArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.AttachRolePolicyInput
		arg3 []func(*iam.Options)
	}
	attachRolePolicyReturns struct {
		result1 *iam.AttachRolePolicyOutput
		result2 error
	}
	attachRolePolicyReturnsOnCall map[int]struct {
		result1 *iam.AttachRolePolicyOutput
		result2 error
	}
	CreateInstanceProfileStub        func(context.Context, *iam.CreateInstanceProfileInput, ...func(*iam.Options)) (*iam.CreateInstanceProfileOutput, error)
	createInstanceProfileMutex       sync.RWMutex
	createInstanceProfileArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreateInstanceProfileInput
		arg3 []func(*iam.Options)
	}
	createInstanceProfileReturns struct {
		result1 *iam.CreateInstanceProfileOutput
		result2 error
	}
	createInstanceProfileReturnsOnCall map[int]struct {
		result1 *iam.CreateInstanceProfileOutput
		result2 error
	}
	CreatePolicyStub        func(context.Context, *iam.CreatePolicyInput, ...func(*iam.Options)) (*iam.CreatePolicyOutput, error)
	createPolicyMutex       sync.RWMutex
	createPolicyArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreatePolicyInput
		arg3 []func(*iam.Options)
	}
	createPolicyReturns struct {
		result1 *iam.CreatePolicyOutput
		result2 error
	}
	createPolicyReturnsOnCall map[int]struct {
		result1 *iam.CreatePolicyOutput
		result2 error
	}
	CreateRoleStub        func(context.Context, *iam.CreateRoleInput, ...func(*iam.Options)) (*iam.CreateRoleOutput, error)
	createRoleMutex       sync.RWMutex
	createRoleArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.CreateRoleInput
		arg3 []func(*iam.Options)
	}
	createRoleReturns struct {
		result1 *iam.CreateRoleOutput
		result2 error
	}
	createRoleReturnsOnCall map[int]struct {
		result1 *iam.CreateRoleOutput
		result2 error
	}
	GetInstanceProfileStub        func(context.Context, *iam.GetInstanceProfileInput, ...func(*iam.Options)) (*iam.GetInstanceProfileOutput, error)
	getInstanceProfileMutex       sync.RWMutex
	getInstanceProfileArgsForCall []struct {
		arg1 context.Context
		arg2 *iam.GetInstanceProfileInput
		arg3 []func(*iam.Options)
	}
	getInstanceProfileReturns struct {
		result1 *iam.GetInstanceProfileOutput
		result2 error
	}
	getInstanceProfileReturnsOnCall map[int]struct {
		result1 *iam.GetInstanceProfileOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIamAPI) AddRoleToInstanceProfile(arg1 context.Context, arg2 *iam.AddRoleToInstanceProfileInput, arg3 ...func(*iam.Options)) (*iam.AddRoleToInstanceProfileOutput, error) {
	fake.addRoleToInstanceProfileMutex.Lock()
	ret, specificReturn := fake.addRoleToInstanceProfileReturnsOnCall[len(fake.addRoleToInstanceProfileArgsForCall)]
	fake.addRoleToInstanceProfileArgsForCall = append(fake.addRoleToInstanceProfileArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.AddRoleToInstanceProfileInput
		arg3 []func(*iam.Options)
	}{arg1, arg2, arg3})
	stub := fake.AddRoleToInstanceProfileStub
	fakeReturns := fake.addRoleToInstanceProfileReturns
	fake.recordInvocation("AddRoleToInstanceProfile", []interface{}{arg1, arg2, arg3})
	fake.addRoleToInstanceProfileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIamAPI) AddRoleToInstanceProfileCallCount() int {
	fake.addRoleToInstanceProfileMutex.RLock()
	defer fake.addRoleToInstanceProfileMutex.RUnlock()
	return len(fake.addRoleToInstanceProfileArgsForCall)
}

func (fake *FakeIamAPI) AddRoleToInstanceProfileCalls(stub func(context.Context, *iam.AddRoleToInstanceProfileInput, ...func(*iam.Options)) (*iam.AddRoleToInstanceProfileOutput, error)) {
	fake.addRoleToInstanceProfileMutex.Lock()
	defer fake.addRoleToInstanceProfileMutex.Unlock()
	fake.AddRoleToInstanceProfileStub = stub
}

func (fake *FakeIamAPI) AddRoleToInstanceProfileArgsForCall(i int) (context.Context, *iam.AddRoleToInstanceProfileInput, []func(*iam.Options)) {
	fake.addRoleToInstanceProfileMutex.RLock()
	defer fake.addRoleToInstanceProfileMutex.RUnlock()
	argsForCall := fake.addRoleToInstanceProfileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIamAPI) AddRoleToInstanceProfileReturns(result1 *iam.AddRoleToInstanceProfileOutput, result2 error) {
	fake.addRoleToInstanceProfileMutex.Lock()
	defer fake.addRoleToInstanceProfileMutex.Unlock()
	fake.AddRoleToInstanceProfileStub = nil
	fake.addRoleToInstanceProfileReturns = struct {
		result1 *iam.AddRoleToInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIamAPI) AddRoleToInstanceProfileReturnsOnCall(i int, result1 *iam.AddRoleToInstanceProfileOutput, result2 error) {
	fake.addRoleToInstanceProfileMutex.Lock()
	defer fake.addRoleToInstanceProfileMutex.Unlock()
	fake.AddRoleToInstanceProfileStub = nil
	if fake.addRoleToInstanceProfileReturnsOnCall == nil {
		fake.addRoleToInstanceProfileReturnsOnCall = make(map[int]struct {
			result1 *iam.AddRoleToInstanceProfileOutput
			result2 error
		})
	}
	fake.addRoleToInstanceProfileReturnsOnCall[i] = struct {
		result1 *iam.AddRoleToInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIamAPI) AttachRolePolicy(arg1 context.Context, arg2 *iam.AttachRolePolicyInput, arg3 ...func(*iam.Options)) (*iam.AttachRolePolicyOutput, error) {
	fake.attachRolePolicyMutex.Lock()
	ret, specificReturn := fake.attachRolePolicyReturnsOnCall[len(fake.attachRolePolicyArgsForCall)]
	fake.attachRolePolicyArgsForCall = append(fake.attachRolePolicyArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.AttachRolePolicyInput
		arg3 []func(*iam.Options)
	}{arg1, arg2, arg3})
	stub := fake.AttachRolePolicyStub
	fakeReturns := fake.attachRolePolicyReturns
	fake.recordInvocation("AttachRolePolicy", []interface{}{arg1, arg2, arg3})
	fake.attachRolePolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIamAPI) AttachRolePolicyCallCount() int {
	fake.attachRolePolicyMutex.RLock()
	defer fake.attachRolePolicyMutex.RUnlock()
	return len(fake.attachRolePolicyArgsForCall)
}

func (fake *FakeIamAPI) AttachRolePolicyCalls(stub func(context.Context, *iam.AttachRolePolicyInput, ...func(*iam.Options)) (*iam.AttachRolePolicyOutput, error)) {
	fake.attachRolePolicyMutex.Lock()
	defer fake.attachRolePolicyMutex.Unlock()
	fake.AttachRolePolicyStub = stub
}

func (fake *FakeIamAPI) AttachRolePolicyArgsForCall(i int) (context.Context, *iam.AttachRolePolicyInput, []func(*iam.Options)) {
	fake.attachRolePolicyMutex.RLock()
	defer fake.attachRolePolicyMutex.RUnlock()
	argsForCall := fake.attachRolePolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIamAPI) AttachRolePolicyReturns(result1 *iam.AttachRolePolicyOutput, result2 error) {
	fake.attachRolePolicyMutex.Lock()
	defer fake.attachRolePolicyMutex.Unlock()
	fake.AttachRolePolicyStub = nil
	fake.attachRolePolicyReturns = struct {
		result1 *iam.AttachRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIamAPI) AttachRolePolicyReturnsOnCall(i int, result1 *iam.AttachRolePolicyOutput, result2 error) {
	fake.attachRolePolicyMutex.Lock()
	defer fake.attachRolePolicyMutex.Unlock()
	fake.AttachRolePolicyStub = nil
	if fake.attachRolePolicyReturnsOnCall == nil {
		fake.attachRolePolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.AttachRolePolicyOutput
			result2 error
		})
	}
	fake.attachRolePolicyReturnsOnCall[i] = struct {
		result1 *iam.AttachRolePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIamAPI) CreateInstanceProfile(arg1 context.Context, arg2 *iam.CreateInstanceProfileInput, arg3 ...func(*iam.Options)) (*iam.CreateInstanceProfileOutput, error) {
	fake.createInstanceProfileMutex.Lock()
	ret, specificReturn := fake.createInstanceProfileReturnsOnCall[len(fake.createInstanceProfileArgsForCall)]
	fake.createInstanceProfileArgsForCall = append(fake.createInstanceProfileArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreateInstanceProfileInput
		arg3 []func(*iam.Options)
	}{arg1, arg2, arg3})
	stub := fake.CreateInstanceProfileStub
	fakeReturns := fake.createInstanceProfileReturns
	fake.recordInvocation("CreateInstanceProfile", []interface{}{arg1, arg2, arg3})
	fake.createInstanceProfileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIamAPI) CreateInstanceProfileCallCount() int {
	fake.createInstanceProfileMutex.RLock()
	defer fake.createInstanceProfileMutex.RUnlock()
	return len(fake.createInstanceProfileArgsForCall)
}

func (fake *FakeIamAPI) CreateInstanceProfileCalls(stub func(context.Context, *iam.CreateInstanceProfileInput, ...func(*iam.Options)) (*iam.CreateInstanceProfileOutput, error)) {
	fake.createInstanceProfileMutex.Lock()
	defer fake.createInstanceProfileMutex.Unlock()
	fake.CreateInstanceProfileStub = stub
}

func (fake *FakeIamAPI) CreateInstanceProfileArgsForCall(i int) (context.Context, *iam.CreateInstanceProfileInput, []func(*iam.Options)) {
	fake.createInstanceProfileMutex.RLock()
	defer fake.createInstanceProfileMutex.RUnlock()
	argsForCall := fake.createInstanceProfileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIamAPI) CreateInstanceProfileReturns(result1 *iam.CreateInstanceProfileOutput, result2 error) {
	fake.createInstanceProfileMutex.Lock()
	defer fake.createInstanceProfileMutex.Unlock()
	fake.CreateInstanceProfileStub = nil
	fake.createInstanceProfileReturns = struct {
		result1 *iam.CreateInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIamAPI) CreateInstanceProfileReturnsOnCall(i int, result1 *iam.CreateInstanceProfileOutput, result2 error) {
	fake.createInstanceProfileMutex.Lock()
	defer fake.createInstanceProfileMutex.Unlock()
	fake.CreateInstanceProfileStub = nil
	if fake.createInstanceProfileReturnsOnCall == nil {
		fake.createInstanceProfileReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateInstanceProfileOutput
			result2 error
		})
	}
	fake.createInstanceProfileReturnsOnCall[i] = struct {
		result1 *iam.CreateInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIamAPI) CreatePolicy(arg1 context.Context, arg2 *iam.CreatePolicyInput, arg3 ...func(*iam.Options)) (*iam.CreatePolicyOutput, error) {
	fake.createPolicyMutex.Lock()
	ret, specificReturn := fake.createPolicyReturnsOnCall[len(fake.createPolicyArgsForCall)]
	fake.createPolicyArgsForCall = append(fake.createPolicyArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreatePolicyInput
		arg3 []func(*iam.Options)
	}{arg1, arg2, arg3})
	stub := fake.CreatePolicyStub
	fakeReturns := fake.createPolicyReturns
	fake.recordInvocation("CreatePolicy", []interface{}{arg1, arg2, arg3})
	fake.createPolicyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIamAPI) CreatePolicyCallCount() int {
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	return len(fake.createPolicyArgsForCall)
}

func (fake *FakeIamAPI) CreatePolicyCalls(stub func(context.Context, *iam.CreatePolicyInput, ...func(*iam.Options)) (*iam.CreatePolicyOutput, error)) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = stub
}

func (fake *FakeIamAPI) CreatePolicyArgsForCall(i int) (context.Context, *iam.CreatePolicyInput, []func(*iam.Options)) {
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	argsForCall := fake.createPolicyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIamAPI) CreatePolicyReturns(result1 *iam.CreatePolicyOutput, result2 error) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = nil
	fake.createPolicyReturns = struct {
		result1 *iam.CreatePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIamAPI) CreatePolicyReturnsOnCall(i int, result1 *iam.CreatePolicyOutput, result2 error) {
	fake.createPolicyMutex.Lock()
	defer fake.createPolicyMutex.Unlock()
	fake.CreatePolicyStub = nil
	if fake.createPolicyReturnsOnCall == nil {
		fake.createPolicyReturnsOnCall = make(map[int]struct {
			result1 *iam.CreatePolicyOutput
			result2 error
		})
	}
	fake.createPolicyReturnsOnCall[i] = struct {
		result1 *iam.CreatePolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIamAPI) CreateRole(arg1 context.Context, arg2 *iam.CreateRoleInput, arg3 ...func(*iam.Options)) (*iam.CreateRoleOutput, error) {
	fake.createRoleMutex.Lock()
	ret, specificReturn := fake.createRoleReturnsOnCall[len(fake.createRoleArgsForCall)]
	fake.createRoleArgsForCall = append(fake.createRoleArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.CreateRoleInput
		arg3 []func(*iam.Options)
	}{arg1, arg2, arg3})
	stub := fake.CreateRoleStub
	fakeReturns := fake.createRoleReturns
	fake.recordInvocation("CreateRole", []interface{}{arg1, arg2, arg3})
	fake.createRoleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIamAPI) CreateRoleCallCount() int {
	fake.createRoleMutex.RLock()
	defer fake.createRoleMutex.RUnlock()
	return len(fake.createRoleArgsForCall)
}

func (fake *FakeIamAPI) CreateRoleCalls(stub func(context.Context, *iam.CreateRoleInput, ...func(*iam.Options)) (*iam.CreateRoleOutput, error)) {
	fake.createRoleMutex.Lock()
	defer fake.createRoleMutex.Unlock()
	fake.CreateRoleStub = stub
}

func (fake *FakeIamAPI) CreateRoleArgsForCall(i int) (context.Context, *iam.CreateRoleInput, []func(*iam.Options)) {
	fake.createRoleMutex.RLock()
	defer fake.createRoleMutex.RUnlock()
	argsForCall := fake.createRoleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIamAPI) CreateRoleReturns(result1 *iam.CreateRoleOutput, result2 error) {
	fake.createRoleMutex.Lock()
	defer fake.createRoleMutex.Unlock()
	fake.CreateRoleStub = nil
	fake.createRoleReturns = struct {
		result1 *iam.CreateRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIamAPI) CreateRoleReturnsOnCall(i int, result1 *iam.CreateRoleOutput, result2 error) {
	fake.createRoleMutex.Lock()
	defer fake.createRoleMutex.Unlock()
	fake.CreateRoleStub = nil
	if fake.createRoleReturnsOnCall == nil {
		fake.createRoleReturnsOnCall = make(map[int]struct {
			result1 *iam.CreateRoleOutput
			result2 error
		})
	}
	fake.createRoleReturnsOnCall[i] = struct {
		result1 *iam.CreateRoleOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIamAPI) GetInstanceProfile(arg1 context.Context, arg2 *iam.GetInstanceProfileInput, arg3 ...func(*iam.Options)) (*iam.GetInstanceProfileOutput, error) {
	fake.getInstanceProfileMutex.Lock()
	ret, specificReturn := fake.getInstanceProfileReturnsOnCall[len(fake.getInstanceProfileArgsForCall)]
	fake.getInstanceProfileArgsForCall = append(fake.getInstanceProfileArgsForCall, struct {
		arg1 context.Context
		arg2 *iam.GetInstanceProfileInput
		arg3 []func(*iam.Options)
	}{arg1, arg2, arg3})
	stub := fake.GetInstanceProfileStub
	fakeReturns := fake.getInstanceProfileReturns
	fake.recordInvocation("GetInstanceProfile", []interface{}{arg1, arg2, arg3})
	fake.getInstanceProfileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIamAPI) GetInstanceProfileCallCount() int {
	fake.getInstanceProfileMutex.RLock()
	defer fake.getInstanceProfileMutex.RUnlock()
	return len(fake.getInstanceProfileArgsForCall)
}

func (fake *FakeIamAPI) GetInstanceProfileCalls(stub func(context.Context, *iam.GetInstanceProfileInput, ...func(*iam.Options)) (*iam.GetInstanceProfileOutput, error)) {
	fake.getInstanceProfileMutex.Lock()
	defer fake.getInstanceProfileMutex.Unlock()
	fake.GetInstanceProfileStub = stub
}

func (fake *FakeIamAPI) GetInstanceProfileArgsForCall(i int) (context.Context, *iam.GetInstanceProfileInput, []func(*iam.Options)) {
	fake.getInstanceProfileMutex.RLock()
	defer fake.getInstanceProfileMutex.RUnlock()
	argsForCall := fake.getInstanceProfileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIamAPI) GetInstanceProfileReturns(result1 *iam.GetInstanceProfileOutput, result2 error) {
	fake.getInstanceProfileMutex.Lock()
	defer fake.getInstanceProfileMutex.Unlock()
	fake.GetInstanceProfileStub = nil
	fake.getInstanceProfileReturns = struct {
		result1 *iam.GetInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIamAPI) GetInstanceProfileReturnsOnCall(i int, result1 *iam.GetInstanceProfileOutput, result2 error) {
	fake.getInstanceProfileMutex.Lock()
	defer fake.getInstanceProfileMutex.Unlock()
	fake.GetInstanceProfileStub = nil
	if fake.getInstanceProfileReturnsOnCall == nil {
		fake.getInstanceProfileReturnsOnCall = make(map[int]struct {
			result1 *iam.GetInstanceProfileOutput
			result2 error
		})
	}
	fake.getInstanceProfileReturnsOnCall[i] = struct {
		result1 *iam.GetInstanceProfileOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeIamAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addRoleToInstanceProfileMutex.RLock()
	defer fake.addRoleToInstanceProfileMutex.RUnlock()
	fake.attachRolePolicyMutex.RLock()
	defer fake.attachRolePolicyMutex.RUnlock()
	fake.createInstanceProfileMutex.RLock()
	defer fake.createInstanceProfileMutex.RUnlock()
	fake.createPolicyMutex.RLock()
	defer fake.createPolicyMutex.RUnlock()
	fake.createRoleMutex.RLock()
	defer fake.createRoleMutex.RUnlock()
	fake.getInstanceProfileMutex.RLock()
	defer fake.getInstanceProfileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIamAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ awsprov.IamAPI = new(FakeIamAPI)
