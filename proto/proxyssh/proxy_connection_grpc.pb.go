// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proxyssh/proxy_connection.proto

package proxyssh

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyConnectionServiceClient is the client API for ProxyConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyConnectionServiceClient interface {
	// ProxySSH establishes an SSH connection to the target host over a bidirectional stream.
	//
	// The client must first send a DialTarget before the connection is established. Agent frames
	// will be populated if SSH Agent forwarding is enabled for the connection.
	ProxySSH(ctx context.Context, opts ...grpc.CallOption) (ProxyConnectionService_ProxySSHClient, error)
}

type proxyConnectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyConnectionServiceClient(cc grpc.ClientConnInterface) ProxyConnectionServiceClient {
	return &proxyConnectionServiceClient{cc}
}

func (c *proxyConnectionServiceClient) ProxySSH(ctx context.Context, opts ...grpc.CallOption) (ProxyConnectionService_ProxySSHClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProxyConnectionService_ServiceDesc.Streams[0], "/unweave.proxy.v1.ProxyConnectionService/ProxySSH", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyConnectionServiceProxySSHClient{stream}
	return x, nil
}

type ProxyConnectionService_ProxySSHClient interface {
	Send(*ProxySSHRequest) error
	Recv() (*ProxySSHResponse, error)
	grpc.ClientStream
}

type proxyConnectionServiceProxySSHClient struct {
	grpc.ClientStream
}

func (x *proxyConnectionServiceProxySSHClient) Send(m *ProxySSHRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyConnectionServiceProxySSHClient) Recv() (*ProxySSHResponse, error) {
	m := new(ProxySSHResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyConnectionServiceServer is the server API for ProxyConnectionService service.
// All implementations must embed UnimplementedProxyConnectionServiceServer
// for forward compatibility
type ProxyConnectionServiceServer interface {
	// ProxySSH establishes an SSH connection to the target host over a bidirectional stream.
	//
	// The client must first send a DialTarget before the connection is established. Agent frames
	// will be populated if SSH Agent forwarding is enabled for the connection.
	ProxySSH(ProxyConnectionService_ProxySSHServer) error
	mustEmbedUnimplementedProxyConnectionServiceServer()
}

// UnimplementedProxyConnectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProxyConnectionServiceServer struct {
}

func (UnimplementedProxyConnectionServiceServer) ProxySSH(ProxyConnectionService_ProxySSHServer) error {
	return status.Errorf(codes.Unimplemented, "method ProxySSH not implemented")
}
func (UnimplementedProxyConnectionServiceServer) mustEmbedUnimplementedProxyConnectionServiceServer() {
}

// UnsafeProxyConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyConnectionServiceServer will
// result in compilation errors.
type UnsafeProxyConnectionServiceServer interface {
	mustEmbedUnimplementedProxyConnectionServiceServer()
}

func RegisterProxyConnectionServiceServer(s grpc.ServiceRegistrar, srv ProxyConnectionServiceServer) {
	s.RegisterService(&ProxyConnectionService_ServiceDesc, srv)
}

func _ProxyConnectionService_ProxySSH_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyConnectionServiceServer).ProxySSH(&proxyConnectionServiceProxySSHServer{stream})
}

type ProxyConnectionService_ProxySSHServer interface {
	Send(*ProxySSHResponse) error
	Recv() (*ProxySSHRequest, error)
	grpc.ServerStream
}

type proxyConnectionServiceProxySSHServer struct {
	grpc.ServerStream
}

func (x *proxyConnectionServiceProxySSHServer) Send(m *ProxySSHResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyConnectionServiceProxySSHServer) Recv() (*ProxySSHRequest, error) {
	m := new(ProxySSHRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyConnectionService_ServiceDesc is the grpc.ServiceDesc for ProxyConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "unweave.proxy.v1.ProxyConnectionService",
	HandlerType: (*ProxyConnectionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProxySSH",
			Handler:       _ProxyConnectionService_ProxySSH_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proxyssh/proxy_connection.proto",
}
