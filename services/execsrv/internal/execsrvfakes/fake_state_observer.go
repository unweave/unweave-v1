// Code generated by counterfeiter. DO NOT EDIT.
package execsrvfakes

import (
	"sync"

	"github.com/unweave/unweave-v1/services/execsrv"
)

type FakeStateObserver struct {
	ExecIDStub        func() string
	execIDMutex       sync.RWMutex
	execIDArgsForCall []struct {
	}
	execIDReturns struct {
		result1 string
	}
	execIDReturnsOnCall map[int]struct {
		result1 string
	}
	IDStub        func() string
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
	}
	iDReturns struct {
		result1 string
	}
	iDReturnsOnCall map[int]struct {
		result1 string
	}
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct {
	}
	nameReturns struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	UpdateStub        func(execsrv.State) execsrv.State
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 execsrv.State
	}
	updateReturns struct {
		result1 execsrv.State
	}
	updateReturnsOnCall map[int]struct {
		result1 execsrv.State
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStateObserver) ExecID() string {
	fake.execIDMutex.Lock()
	ret, specificReturn := fake.execIDReturnsOnCall[len(fake.execIDArgsForCall)]
	fake.execIDArgsForCall = append(fake.execIDArgsForCall, struct {
	}{})
	stub := fake.ExecIDStub
	fakeReturns := fake.execIDReturns
	fake.recordInvocation("ExecID", []interface{}{})
	fake.execIDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStateObserver) ExecIDCallCount() int {
	fake.execIDMutex.RLock()
	defer fake.execIDMutex.RUnlock()
	return len(fake.execIDArgsForCall)
}

func (fake *FakeStateObserver) ExecIDCalls(stub func() string) {
	fake.execIDMutex.Lock()
	defer fake.execIDMutex.Unlock()
	fake.ExecIDStub = stub
}

func (fake *FakeStateObserver) ExecIDReturns(result1 string) {
	fake.execIDMutex.Lock()
	defer fake.execIDMutex.Unlock()
	fake.ExecIDStub = nil
	fake.execIDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStateObserver) ExecIDReturnsOnCall(i int, result1 string) {
	fake.execIDMutex.Lock()
	defer fake.execIDMutex.Unlock()
	fake.ExecIDStub = nil
	if fake.execIDReturnsOnCall == nil {
		fake.execIDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.execIDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStateObserver) ID() string {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
	}{})
	stub := fake.IDStub
	fakeReturns := fake.iDReturns
	fake.recordInvocation("ID", []interface{}{})
	fake.iDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStateObserver) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeStateObserver) IDCalls(stub func() string) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = stub
}

func (fake *FakeStateObserver) IDReturns(result1 string) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStateObserver) IDReturnsOnCall(i int, result1 string) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStateObserver) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct {
	}{})
	stub := fake.NameStub
	fakeReturns := fake.nameReturns
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStateObserver) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeStateObserver) NameCalls(stub func() string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = stub
}

func (fake *FakeStateObserver) NameReturns(result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStateObserver) NameReturnsOnCall(i int, result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStateObserver) Update(arg1 execsrv.State) execsrv.State {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 execsrv.State
	}{arg1})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStateObserver) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeStateObserver) UpdateCalls(stub func(execsrv.State) execsrv.State) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeStateObserver) UpdateArgsForCall(i int) execsrv.State {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStateObserver) UpdateReturns(result1 execsrv.State) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 execsrv.State
	}{result1}
}

func (fake *FakeStateObserver) UpdateReturnsOnCall(i int, result1 execsrv.State) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 execsrv.State
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 execsrv.State
	}{result1}
}

func (fake *FakeStateObserver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.execIDMutex.RLock()
	defer fake.execIDMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStateObserver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ execsrv.StateObserver = new(FakeStateObserver)
