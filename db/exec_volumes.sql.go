// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: exec_volumes.sql

package db

import (
	"context"
)

const ExecVolumeCreate = `-- name: ExecVolumeCreate :exec
insert into unweave.exec_volume (exec_id, volume_id, mount_path)
values ($1, $2, $3)
`

type ExecVolumeCreateParams struct {
	ExecID    string `json:"execID"`
	VolumeID  string `json:"volumeID"`
	MountPath string `json:"mountPath"`
}

func (q *Queries) ExecVolumeCreate(ctx context.Context, arg ExecVolumeCreateParams) error {
	_, err := q.db.ExecContext(ctx, ExecVolumeCreate, arg.ExecID, arg.VolumeID, arg.MountPath)
	return err
}

const ExecVolumeDelete = `-- name: ExecVolumeDelete :exec
delete from unweave.exec_volume
where exec_id = $1
`

func (q *Queries) ExecVolumeDelete(ctx context.Context, execID string) error {
	_, err := q.db.ExecContext(ctx, ExecVolumeDelete, execID)
	return err
}

const ExecVolumeGet = `-- name: ExecVolumeGet :many
select exec_id, volume_id, mount_path from unweave.exec_volume as ev where ev.exec_id = $1
`

func (q *Queries) ExecVolumeGet(ctx context.Context, execID string) ([]UnweaveExecVolume, error) {
	rows, err := q.db.QueryContext(ctx, ExecVolumeGet, execID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnweaveExecVolume
	for rows.Next() {
		var i UnweaveExecVolume
		if err := rows.Scan(&i.ExecID, &i.VolumeID, &i.MountPath); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
