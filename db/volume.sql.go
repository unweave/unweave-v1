// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: volume.sql

package db

import (
	"context"
)

const VolumeCreate = `-- name: VolumeCreate :one
insert into unweave.volume (id, project_id, provider)
values($1, $2, $3)
returning id, name, project_id, provider, created_at, updated_at
`

type VolumeCreateParams struct {
	ID        string `json:"id"`
	ProjectID string `json:"projectID"`
	Provider  string `json:"provider"`
}

func (q *Queries) VolumeCreate(ctx context.Context, arg VolumeCreateParams) (UnweaveVolume, error) {
	row := q.db.QueryRowContext(ctx, VolumeCreate, arg.ID, arg.ProjectID, arg.Provider)
	var i UnweaveVolume
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProjectID,
		&i.Provider,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const VolumeDelete = `-- name: VolumeDelete :exec
delete from unweave.volume
where id = $1
`

func (q *Queries) VolumeDelete(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, VolumeDelete, id)
	return err
}

const VolumeGet = `-- name: VolumeGet :one
select id, name, project_id, provider, created_at, updated_at from unweave.volume
where id = $1
`

func (q *Queries) VolumeGet(ctx context.Context, id string) (UnweaveVolume, error) {
	row := q.db.QueryRowContext(ctx, VolumeGet, id)
	var i UnweaveVolume
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProjectID,
		&i.Provider,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const VolumeList = `-- name: VolumeList :many
select id, name, project_id, provider, created_at, updated_at from unweave.volume
where project_id = $1
`

func (q *Queries) VolumeList(ctx context.Context, projectID string) ([]UnweaveVolume, error) {
	rows, err := q.db.QueryContext(ctx, VolumeList, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnweaveVolume
	for rows.Next() {
		var i UnweaveVolume
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProjectID,
			&i.Provider,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
