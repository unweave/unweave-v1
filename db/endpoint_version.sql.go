// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: endpoint_version.sql

package db

import (
	"context"
	"time"
)

const EndpointVersion = `-- name: EndpointVersion :one
SELECT id, endpoint_id, exec_id, project_id, http_address, primary_version, created_at, deleted_at FROM unweave.endpoint_version WHERE id = $1
`

func (q *Queries) EndpointVersion(ctx context.Context, id string) (UnweaveEndpointVersion, error) {
	row := q.db.QueryRowContext(ctx, EndpointVersion, id)
	var i UnweaveEndpointVersion
	err := row.Scan(
		&i.ID,
		&i.EndpointID,
		&i.ExecID,
		&i.ProjectID,
		&i.HttpAddress,
		&i.PrimaryVersion,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const EndpointVersionCreate = `-- name: EndpointVersionCreate :exec
INSERT INTO unweave.endpoint_version (id, endpoint_id, exec_id, project_id, http_address, created_at) VALUES ($1, $2, $3, $4, $5, $6)
`

type EndpointVersionCreateParams struct {
	ID          string    `json:"id"`
	EndpointID  string    `json:"endpointID"`
	ExecID      string    `json:"execID"`
	ProjectID   string    `json:"projectID"`
	HttpAddress string    `json:"httpAddress"`
	CreatedAt   time.Time `json:"createdAt"`
}

func (q *Queries) EndpointVersionCreate(ctx context.Context, arg EndpointVersionCreateParams) error {
	_, err := q.db.ExecContext(ctx, EndpointVersionCreate,
		arg.ID,
		arg.EndpointID,
		arg.ExecID,
		arg.ProjectID,
		arg.HttpAddress,
		arg.CreatedAt,
	)
	return err
}

const EndpointVersionDemote = `-- name: EndpointVersionDemote :exec
UPDATE unweave.endpoint_version
SET primary_version = FALSE
WHERE endpoint_id = $1
`

func (q *Queries) EndpointVersionDemote(ctx context.Context, endpointID string) error {
	_, err := q.db.ExecContext(ctx, EndpointVersionDemote, endpointID)
	return err
}

const EndpointVersionList = `-- name: EndpointVersionList :many
SELECT id, endpoint_id, exec_id, project_id, http_address, primary_version, created_at, deleted_at FROM unweave.endpoint_version WHERE endpoint_id = $1
`

func (q *Queries) EndpointVersionList(ctx context.Context, endpointID string) ([]UnweaveEndpointVersion, error) {
	rows, err := q.db.QueryContext(ctx, EndpointVersionList, endpointID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnweaveEndpointVersion
	for rows.Next() {
		var i UnweaveEndpointVersion
		if err := rows.Scan(
			&i.ID,
			&i.EndpointID,
			&i.ExecID,
			&i.ProjectID,
			&i.HttpAddress,
			&i.PrimaryVersion,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const EndpointVersionPromote = `-- name: EndpointVersionPromote :exec
UPDATE unweave.endpoint_version
SET primary_version = TRUE
WHERE id = $1
`

func (q *Queries) EndpointVersionPromote(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, EndpointVersionPromote, id)
	return err
}
