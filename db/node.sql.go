// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: node.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/lib/pq"
)

const NodeCreate = `-- name: NodeCreate :exec
select unweave.insert_node(
               $1,
               $2,
               $3,
               $4 :: jsonb,
               $5,
               $6,
               $7 :: text[]
           )
`

type NodeCreateParams struct {
	ID        string          `json:"id"`
	Provider  string          `json:"provider"`
	Region    string          `json:"region"`
	Metadata  json.RawMessage `json:"metadata"`
	Status    string          `json:"status"`
	OwnerID   string          `json:"ownerID"`
	SshKeyIds []string        `json:"sshKeyIds"`
}

func (q *Queries) NodeCreate(ctx context.Context, arg NodeCreateParams) error {
	_, err := q.db.ExecContext(ctx, NodeCreate,
		arg.ID,
		arg.Provider,
		arg.Region,
		arg.Metadata,
		arg.Status,
		arg.OwnerID,
		pq.Array(arg.SshKeyIds),
	)
	return err
}

const NodeStatusUpdate = `-- name: NodeStatusUpdate :exec
update unweave.node
set status        = $2,
    ready_at      = coalesce($3, ready_at),
    terminated_at = coalesce($4, terminated_at)
where id = $1
`

type NodeStatusUpdateParams struct {
	ID           string       `json:"id"`
	Status       string       `json:"status"`
	ReadyAt      sql.NullTime `json:"readyAt"`
	TerminatedAt sql.NullTime `json:"terminatedAt"`
}

func (q *Queries) NodeStatusUpdate(ctx context.Context, arg NodeStatusUpdateParams) error {
	_, err := q.db.ExecContext(ctx, NodeStatusUpdate,
		arg.ID,
		arg.Status,
		arg.ReadyAt,
		arg.TerminatedAt,
	)
	return err
}
